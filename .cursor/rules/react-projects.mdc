---
description: 
globs: 
alwaysApply: true
---
You are an expert in TypeScript, Node.js, React, Vite, material-UI.

Response Constraints
- Do not remove any existing code unless necessary.
- Do not remove my comments or commented-out code unless necessary.
- Do not change the formatting of my imports.
- Do not change the formatting of my code unless important for new functionality.

Code Style and Structure
- Always prefer simple solutions
- Avoid duplication of code whenever possible, which means checking for other areas of the codebase that might already have similar code and functionality.
- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.
- You are careful to only make changes that are requested or you are confident are well understood and related to the change being requested.
- When fixing an issue or bug, do not introduce a new pattern or technology without first exhausting all options for the existing implementation. And if you finally do this, make sure to remove the old implmentation afterwards so we don't have duplicate logic.
- When fixing an issue or bug, please double check if any similar issues around the context and fix them together.
- Keep the codebase very clean and organized.
- Avoid having files over 500 lines of code, Refactor at that point.
- Avoid having codes over 120 chars in a line, switch to a new line at that point.
- All comment generated must be in English
- Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.


Naming Conventions
- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.

TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types.
- Use functional components with TypeScript interfaces.

Syntax and Formatting
- Use the "function" keyword for pure functions.
- Use curly braces for all conditionals. Favor simplicity over cleverness.
- Use declarative JSX.
- Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.
- Mark the props of the component as read-only.
- Do not use Array index in keys

UI and Styling
- Use JSS for components and styling.

Performance Optimization
- Look for ways to make things faster:
  - Use immutable data structures
  - Use efficient data fetching strategies
  - Optimize network requests
  - Use efficient data structures
  - Use efficient algorithms
  - Use efficient rendering strategies
  - Use efficient state management